/* UISquare Component Styles */

/* Container - Base styles with size transitions */
.container {
    display: inline-block;
    margin: 0;
    padding: 0;
    line-height: 0;
    vertical-align: top;
    background-color: transparent;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    box-sizing: border-box;
}

/* Size-specific container styles */
.size-small {
    /* Small size specific styles if needed */
}

.size-mid {
    /* Mid size specific styles if needed */
}

/* SVG container styles */
.container svg {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: block;
}

/* Square rect styles for different states */
.container rect {
    fill: var(--color-gray);
    stroke: var(--color-gray);
    stroke-width: 1;
    transition: fill 0.2s ease, stroke 0.2s ease, transform 0.1s ease;
}

/* Active state */
.squareActive rect {
    fill: var(--color-white);
    stroke: var(--color-white);
}

/* Inactive state */
.squareInactive rect {
    fill: var(--color-gray);
    stroke: var(--color-gray);
}

/* Disabled state */
.squareDisabled rect {
    fill: var(--color-transparent);
    stroke: var(--color-gray);
}

/* Small size disabled squares should be outlined, not filled */
.size-small.squareDisabled rect {
    fill: transparent;
    stroke: var(--color-gray);
    /* Same color as inactive state */
}

/* Hover effects for interactive states */
.squareActive:hover {
    background-color: var(--color-dark-gray);
    transform: translateY(-1px);
}

.squareInactive:hover {
    background-color: var(--color-dark-gray);
    transform: translateY(-1px);
}

.squareActive:hover rect {
    fill: var(--color-light-gray);
    stroke: var(--color-light-gray);
}

.squareInactive:hover rect {
    fill: var(--color-white);
    stroke: var(--color-white);
}

/* Focus states for accessibility */
.squareActive:focus-visible {
    outline: var(--size-line) solid var(--color-yolk);
    outline-offset: var(--size-outline-offset);
}

.squareInactive:focus-visible {
    outline: var(--size-line) solid var(--color-yolk);
    outline-offset: var(--size-outline-offset);
}

/* Only view mode - disable hover effects */
.onlyView:hover {
    background-color: transparent;
    transform: none;
}

.onlyView:hover rect {
    fill: inherit;
    stroke: inherit;
}

/* Content container for children - optimized for readable text */
.contentContainer {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-white);
    font-family: var(--font-body);
    font-size: var(--font-body-size);
    text-align: center;
    overflow: hidden;
    word-wrap: break-word;
    padding: 1px;
}

/* Size transition animation */
.container {
    animation: sizeTransition 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes sizeTransition {
    0% {
        transform: scale(0.8);
        background-color: var(--color-dark-gray);
    }

    50% {
        transform: scale(1.1);
        background-color: var(--color-gray);
    }

    100% {
        transform: scale(1);
        background-color: transparent;
    }
}

/* Responsive behavior */
@media (max-width: 768px) {
    .container {
        transition: all 0.2s ease;
    }

    .squareActive:hover,
    .squareInactive:hover {
        transform: none;
    }
}

/* Disabled state - no hover effects */
.squareDisabled:hover {
    background-color: transparent;
    transform: none;
}

.squareDisabled:hover rect {
    fill: var(--color-dark-gray);
    stroke: var(--color-dark-gray);
}