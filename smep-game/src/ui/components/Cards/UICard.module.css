/* UICard Component Styles */

/* CSS Custom Properties for flexible color management:
 * --card-background-color: Main background color (default: var(--color-dark-gray))
 * --card-border-color: Border color (default: var(--color-gray))
 * --card-hover-background-color: Hover background color (default: var(--color-gray))
 * --card-hover-border-color: Hover border color (default: var(--color-white))
 * --card-disabled-background-color: Disabled background color (default: var(--color-dark-gray))
 * --card-disabled-border-color: Disabled border color (default: var(--color-gray))
 * 
 * Usage: Set these properties on the UICard component to customize colors
 * Example: style={{ '--card-background-color': '#custom-color' }}
 */

/* Rectangle shape styles */
.rectangleContainer {
    position: relative;
    display: inline-block;
    /* Smooth transitions for size changes */
    transition: width 0.3s ease-in-out, height 0.3s ease-in-out;
    /* Dynamic sizing will be controlled by CSS custom properties */
    width: var(--card-width, var(--size-card-small));
    height: var(--card-height, var(--size-card-small));
    /* Prevent shadows from going beyond card boundaries */
    overflow: hidden;
}

.contentContainer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0px;
    width: 100%;
    height: 100%;
    z-index: 2;
}

/* When circle is shown, push content to bottom */
.withCircle {
    justify-content: end;
}

/* When no circle, center the label */
.withoutCircle {
    justify-content: center;
}

/* Atomic number displayed in top-left corner */
.atomicNumber {
    position: absolute;
    right: var(--size-padding-small);
    bottom: var(--size-padding-small);
    z-index: 3;
    pointer-events: none;
    line-height: 1;
}

/* TODO: check this , do we really usi it for something, seems obsolete*/
.circleAbove {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1px;
}

.symbol {
    /* Remove hardcoded color to allow UILabel to control its own colors */
    /*font-weight: 600; */
    user-select: none;
    pointer-events: none;
    text-shadow: var(--shadow-text-subtle);
    text-align: center;
    line-height: 1;
    /* Let UILabel handle font-size, font-family, and color through its own classes */
}

/* Antiparticle symbols now handled by AntiparticleSymbol component */

/* Size-specific containers */
.bigContainer {
    width: 100%;
    min-width: var(--size-card-big-w);
    max-width: var(--size-card-big-w);
    margin: 0 auto;
    padding: 0 var(--size-padding-large);
    /* Smooth transitions for size changes */
    transition: max-width 0.3s ease-in-out, padding 0.3s ease-in-out;
    /* Prevent shadows from going beyond card boundaries */
    overflow: hidden;
}

.bigCardShape {
    width: 100%;
    min-width: var(--size-card-big-w);
    height: var(--size-card-big-h);
    border: var(--size-line) solid var(--card-border-color, var(--color-gray));
    border-radius: var(--size-border-radius-small);
    background-color: var(--card-background-color);
    cursor: pointer;
    transition: all 0.3s ease-in-out, width 0.3s ease-in-out, height 0.3s ease-in-out;
    position: relative;
    box-sizing: border-box;
    /* Prevent shadows from going beyond card boundaries */
    overflow: hidden;
}

.bigCardShape:hover {
    border-color: var(--card-hover-border-color, var(--color-white));
    background-color: var(--card-hover-background-color, var(--color-gray));
}

.bigCardShape:active {
    transform: translateY(1px);
}

/* Disabled state for all card sizes */
.disabled {
    cursor: default !important;
    filter: grayscale(50%);
    pointer-events: none;

}

/* Disabled state for big card specifically */
.bigCardShape.disabled {
    border-color: var(--card-disabled-border-color, var(--color-gray));
    background-color: var(--card-disabled-background-color, #232323);
}

.bigCardShape.disabled:hover {
    border-color: var(--card-disabled-border-color, var(--color-gray));
    background-color: var(--card-disabled-background-color, #232323);
    transform: none;
}

/* Disabled state for small and mid cards - inherits from .disabled class above */

.bigContentContainer {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--size-padding-large);
    box-sizing: border-box;
}

/* Additional styling for mid-size content if needed */
/* .midContentContainer {
    // Future mid-size specific styles can be added here
} */

/* Card wrapper for small and mid sizes */
.cardWrapper {
    position: relative;
    width: 100%;
    height: 100%;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    box-sizing: border-box;
    /* Prevent shadows from going beyond card boundaries */
    overflow: hidden;
    /* Normal state background - using CSS custom properties for flexibility */
    /*background-color: var(--card-background-color, #232323);*/
    /* Ensure background is visible behind shape components */
    z-index: 0;
}


/* TODO: cleanup this file from direct addressing to HEX codes and replace with tokens */
/* Note: Background override styles removed - handled by component logic instead */

/* Size-specific card dimensions for smooth transitions */
.cardSizeSmall {
    --card-width: var(--size-card-small);
    --card-height: var(--size-card-small);
}

.cardSizeMid {
    --card-width: var(--size-card-mid-w);
    --card-height: var(--size-card-mid-h);
}

.cardSizeBig {
    --card-width: var(--size-card-big-w);
    --card-height: var(--size-card-big-h);
}

/* Disabled particle styling */
.disabledParticle {
    /* TODO: convert it to actual allowed colors from palette */
    filter: grayscale(100%);
}