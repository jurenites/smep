/* UIProgressBar Component Styles */

/* Container - Base styles */
.container {
    display: inline-block;
    margin: 0;
    padding: 0;
    line-height: 0;
    vertical-align: top;
    background-color: transparent;
    transition: all 0.2s ease;
    position: relative;
    box-sizing: border-box;
}

/* Full width container */
.container.fullWidth {
    display: block;
    width: 100%;
}

/* Size-specific container styles (can be defined here if needed) */

/* SVG container styles */
.container svg {
    transition: all 0.2s ease;
    display: block;
}

/* Cursor states */
.cursorPointer {
    cursor: pointer;
}

.cursorDefault {
    cursor: default;
}

/* Background outline styles for different states */
.background {
    transition: stroke 0.2s ease;
}

/* Progress fill styles */
.fill {
    transition: fill 0.2s ease;
}

/* Active state */
.progressActive {
    color: var(--color-white);
}

.progressActive .background {
    stroke: var(--color-white);
}

/* Note: Fill color is controlled by the fillColor prop in the component, not CSS */

/* Inactive state */
.progressInactive {
    color: var(--color-gray);
}

.progressInactive .background {
    stroke: var(--color-gray);
}

/* Disabled state */
.progressDisabled {
    color: var(--color-dark-gray);
}

.progressDisabled .background {
    stroke: var(--color-dark-gray);
}

.progressDisabled .fill {
    fill: var(--color-dark-gray);
}

/* Hover effects for interactive states */
.progressActive:hover {
    background-color: var(--color-dark-gray);
}

.progressInactive:hover {
    background-color: var(--color-dark-gray);
}

.progressActive:hover .background {
    stroke: var(--color-light-gray);
}

.progressInactive:hover .background {
    stroke: var(--color-white);
}

/* Fill colors are controlled by the fillColor prop, not hover states */

/* Focus states for accessibility */
.progressActive:focus-visible {
    outline: var(--size-line) solid var(--color-yolk);
    outline-offset: var(--size-outline-offset);
}

.progressInactive:focus-visible {
    outline: var(--size-line) solid var(--color-yolk);
    outline-offset: var(--size-outline-offset);
}

/* Disabled state - no hover effects */
.progressDisabled:hover {
    background-color: transparent;
}

.progressDisabled:hover .background {
    stroke: var(--color-dark-gray);
}

/* Disabled fill color is controlled by the fillColor prop */

/* Progress animation - width transitions removed for instant sync with percentage display */

/* Responsive behavior */
@media (max-width: 768px) {
    .container {
        transition: all 0.2s ease;
    }

    .progressActive:hover,
    .progressInactive:hover {
        background-color: transparent;
    }
}

/* Size-specific adjustments - width transitions removed for instant sync
   Future size-specific fill adjustments can be added here if needed */

/* Segmented mode styles */
.segmentedContainer {
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    gap: 0;
    position: relative;
}

.segment {
    flex: 1;
    min-width: 31px;
    /* TODO: Change top Minimum width using CARD_SMALL token value */
    margin-right: -1px;
    /* Reduce 2px border gap to 1px */
    position: relative;
}

.segment:last-child {
    margin-right: 0;
    /* No margin on last segment */
}

/* Segment with yolk background */
.segmentWithYolk {
    position: relative;
}

/* Yolk background layer - fills to 100% to show target path */
.yolkBackgroundLayer {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    pointer-events: none;
}

/* White foreground layer - animates on top of yolk */
.whiteForegroundLayer {
    position: relative;
    z-index: 2;
}

/* Yolk drain layer - only layer rendered during draining mode */
.yolkDrainLayer {
    position: relative;
    pointer-events: none;
}