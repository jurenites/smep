/* Periodic Table Blocks Layout */

.periodicTableContainer {
    display: flex;
    flex-direction: column;
    gap: var(--size-gap-large);
    background: var(--color-background-secondary);
}

.activeElementInfo {
    background: var(--color-accent-primary);
    color: var(--color-text-on-accent);
    font-size: var(--font-code-size);
    text-align: start;
    border: 2px solid var(--color-accent-secondary);
}

/* Unified wrapper for all view modes */
.periodicTableWrapper {
    position: relative;
    width: 100%;
    min-height: 300px;
    /* Ensure space for F-block repositioning */
}

/* Block positioner - uses CSS Grid for precise positioning */
.blockPositioner {
    display: grid;
    grid-template-columns: auto auto auto 1fr;
    grid-template-rows: auto auto;
    gap: var(--size-gap-small);
    position: relative;
    width: 100%;
    height: 100%;
}

/* Base block container styles */
.blockContainer {
    min-width: fit-content;
    width: fit-content;
    position: relative;
    /*transition: all 0.1s ease-in-out;*/
    transform-origin: center;
}

/* Long view mode positioning (horizontal layout: S, F, D, P) */
.periodicTableWrapper[data-view-mode="long"] .blockPositioner {
    display: flex;
    flex-direction: row;
    align-items: flex-end;
    grid-template-columns: none;
    grid-template-rows: none;
    justify-content: flex-start;
}

.periodicTableWrapper[data-view-mode="long"] .blockContainer {
    position: static;
    /*transform: translate(0, 0);*/
}

/* F-block and D-block intersection in long view */
.periodicTableWrapper[data-view-mode="long"] .blockContainer[data-block="f"] {
    /* margin-right: -6px; */
}

.periodicTableWrapper[data-view-mode="long"] .blockContainer[data-block="d"] {
    margin-left: 0;
}

/* Short view mode positioning (S, D, P in main row, F below) */
.periodicTableWrapper[data-view-mode="short"] .blockContainer[data-block="s"] {
    grid-column: 1;
    grid-row: 1;
    /*transform: translate(0, 0);*/
    align-self: end;
}

.periodicTableWrapper[data-view-mode="short"] .blockContainer[data-block="d"] {
    grid-column: 2;
    grid-row: 1;
    /*transform: translate(0, 0);*/
    align-self: end;
}

.periodicTableWrapper[data-view-mode="short"] .blockContainer[data-block="p"] {
    grid-column: 3;
    grid-row: 1;
    /*transform: translate(0, 0);*/
    align-self: end;
}

.periodicTableWrapper[data-view-mode="short"] .blockContainer[data-block="f"] {
    grid-column: 1 / -1;
    grid-row: 2;
    /*transform: translate(12px, var(--size-gap-small));*/
    justify-self: start;
    padding-left: 16px;
}

/* Enhanced transition for F-block repositioning */
.blockContainer[data-block="f"] {
    /*transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);*/
}

/* Smooth transitions for all blocks during view mode changes */
.blockContainer {
    will-change: transform, grid-column, grid-row;
}

/* Unified element grid for both modes */
.elementGrid {
    display: grid;
    gap: var(--size-gap-small);
    padding: 0;
    width: fit-content;
    height: fit-content;
}

.periodicTableWrapper .elementGrid .squareInactive {
    background-color: var(--color-gray);
    border: none !important;
}

.periodicTableWrapper .elementGrid .squareActive {
    background-color: var(--color-white);
    border: none !important;
}

.periodicTableWrapper .elementGrid .squareDisabled {
    background-color: var(--color-transparent);
    border: none !important;
}

/* Individual element cell for both UICard and UISquare */
.elementCell {
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    /*transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);*/
}

/* Block label styling */
.blockLabel {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: var(--size-gap-small);
    text-align: center;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .periodicTableWrapper[data-view-mode="long"] .blockPositioner {
        flex-direction: column;
        align-items: center;
    }

    .periodicTableWrapper[data-view-mode="short"] .blockContainer[data-block="f"] {
        transform: translate(0, var(--size-gap-small));
    }
}